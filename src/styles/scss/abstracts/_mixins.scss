@use "sass:math";
@use "./functions" as f;
@use "./paddings" as p;
@use "./margins" as m;
@use "./breakpoints" as b;
@use "./colors" as c;

// **********[ SIDEBAR CONTAINER ]**********

// sidebar-container ____define default styles

@mixin sidebar-container($navbar-height: 60, $container-width: 100%) {
  background: rgba(#fff, 0.98);
  position: absolute;
  right: 0;
  top: f.px-rem($navbar-height);
  width: $container-width;
  transform: translateX(100%);
  height: 0;
  visibility: hidden;
}

// **********[ SIDEBAR-LIST ]**********

// sidebar-list ____define default styles

@mixin sidebar-list() {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: f.g(10);
  padding: p.p(medium);
}

// **********[ SHOW SIDEBAR ]**********

// show-sidebar ____define default styles

@mixin show-sidebar($navbar-height: 60) {
  visibility: visible;
  height: calc(100vh - f.px-rem($navbar-height));
  transform: translateX(0);
  transition: transform 500ms ease-in-out;
}

// **********[ SIDEBAR-LINK ]**********

// sidebar-link ____define default styles

@mixin sidebar-link($color: c.$text-gray) {
  text-transform: capitalize;
  letter-spacing: f.ls(1);
  padding: p.p(x-small) p.p(large);
  color: $color;
}

// **********[ HOVER-POINTER ]**********

// hover ____define default styles

@mixin hover-pointer() {
  &:hover {
    cursor: pointer;
    transition: all 300ms;
  }
}
// **********[ HOVER-SCALE ]**********

// hover-scale ____define default styles with scale-value as argument

@mixin hover-scale($scale-value: 1.1) {
  &:hover {
    transform: scale($scale-value);
    cursor: pointer;
    transition: all 300ms;
  }
}

// **********[ HOVER-COLOR ]**********

// hover-color ____define default styles with color value as argument

@mixin hover-color($color) {
  &:hover {
    color: $color;
    cursor: pointer;
    transition: all 300ms;
  }
}

// **********[ HOVER-BG-DARKEN ]**********

// hover-bg-darken ____define default styles with background and darken perecntage as arguments

@mixin hover-bg-darken($bg, $amount: 5) {
  &:hover {
    background: darken($bg, $amount);
    cursor: pointer;
    transition: all 300ms;
  }
}

// **********[ HOVER-BG-LIGHTEN ]**********

// hover-bg-lighten ____define default styles with background and lighten perecntage as arguments

@mixin hover-bg-lighten($bg, $amount: 5) {
  &:hover {
    background: lighten($bg, $amount);
    cursor: pointer;
    transition: all 300ms;
  }
}

// **********[ FLEX ]**********

// flex-center ____define default styles with gap as argument

@mixin flex-center($gap: base) {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: f.g($gap);
}

// flex-row ____define default styles with gap as argument

@mixin flex-row($gap: base) {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  gap: f.g($gap);
}

// flex-column ____define default styles with gap as argument

@mixin flex-col($gap: base) {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: f.g($gap);
}

// **********[ GRID ]**********

// grid-center ____define default styles with gap as argument

@mixin grid-center($gap: base) {
  display: grid;
  place-items: center;
  gap: f.g($gap);
}

// **********[ BOX SHADOW ]**********

// box-shadow ____mixin should take $x, $y, $blurr values (in unitless pixels) and $color as arguments. pixel values will be processed using px-rem function to get corresponding rem values.

@mixin box-shadow($x: 1, $y: 3, $blurr: 5, $color: rgba(#000, 0.1)) {
  box-shadow: f.px-rem($x) f.px-rem($y) f.px-rem($blurr) $color;
}

// box-shadow-light ____mixin should take $x, $y, $blurr values (in unitless pixels) and $color as arguments for box-shadow. pixel values will be processed using px-rem function to get corresponding rem values.

@mixin box-shadow-light($x: 0, $y: 0, $blurr: 1, $color: rgba(#000, 0.1)) {
  box-shadow: f.px-rem($x) f.px-rem($y) f.px-rem($blurr) $color;
}

// box-shadow-medium ____mixin should take $x, $y, $blurr values (in unitless pixels) and $color as arguments for box-shadow. pixel values will be processed using px-rem function to get corresponding rem values.

@mixin box-shadow-medium($x: 0, $y: 2, $blurr: 5, $color: rgba(#000, 0.1)) {
  box-shadow: f.px-rem($x) f.px-rem($y) f.px-rem($blurr) $color;
}

// box-shadow-large ____mixin should take $x, $y, $blurr values (in unitless pixels) and $color as arguments for box-shadow. pixel values will be processed using px-rem function to get corresponding rem values.

@mixin box-shadow-large($x: 1, $y: 3, $blurr: 10, $color: rgba(#000, 0.1)) {
  box-shadow: f.px-rem($x) f.px-rem($y) f.px-rem($blurr) $color;
}

// **********[ BORDER ]**********

// border ____mixin should take $width, $color values as arguments. pixel values will be processed using box-shadow function to get corresponding rem values.

@mixin border($width: 1, $color: rgba(#000, 0.1)) {
  box-shadow: f.px-rem($width) solid $color;
}

// **********[ BORDER BOX SHADOW ]**********

// border-box-shadow ____mixin should include thin border and should take $x, $y, $blurr values (in unitless pixels) and $color as arguments for box-shadow. pixel values will be processed using px-rem function to get corresponding rem values.

@mixin border-box-shadow($x: 0, $y: 0, $blurr: 1, $color: rgba(#000, 0.1)) {
  border: f.px-rem(0.75) solid rgba(#000, 0.1);
  box-shadow: f.px-rem($x) f.px-rem($y) f.px-rem($blurr) $color;
}

// **********[ COLOR THEME ]**********

// theme-color ____set text-color based on background-color and it's lightness

@mixin set-color-theme($bg-color) {
  background: $bg-color;
  color: f.set-text-color($bg-color);
}

// **********[ SLIDE-DOWN ON HOVER ]**********

// slide-down on hover ____define mixin which should take from and to values of translateY in keyframes as arguments and return sliding down effect on hovering the element

@mixin slide-down-on-hover($from: -1, $to: 5) {
  @keyframes slide-down {
    from {
      transform: translateY(f.px-rem($from));
    }
    to {
      transform: translateY(f.px-rem($to));
    }
  }

  &:hover {
    animation: slide-down 500ms ease forwards 100ms;
    cursor: pointer;
  }
}

// **********[ UNDERLINE ]**********

//  underline ____define underline mixin which should take background-color as argument to include below titles.

@mixin underline($bg-color: c.$primary-clr) {
  background: $bg-color;
  width: f.px-rem(60);
  height: f.px-rem(3);
  margin-inline: auto;
  margin-top: m.m(small);
}
